<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.2 (Python 3.9.2 on linux)" generated="20211123 14:23:10.863" rpa="false" schemaversion="2">
<suite id="s1" name="Robottests" source="/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/robottests.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymssql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20211123 14:23:11.418" level="INFO">Connecting using : pymssql.connect(database=AdventureWorks2019, user=SA, password=1epeSHka, host=127.0.0.1, port=1433) </msg>
<status status="PASS" starttime="20211123 14:23:11.371" endtime="20211123 14:23:11.426"/>
</kw>
<test id="s1-t1" name="Table Must Exist - Address">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>Address</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20211123 14:23:11.555" level="INFO">Executing : Table Must Exist  |  Address </msg>
<msg timestamp="20211123 14:23:11.555" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='Address' </msg>
<status status="PASS" starttime="20211123 14:23:11.513" endtime="20211123 14:23:11.557"/>
</kw>
<doc>Checking for the presence of the Address table in the database</doc>
<tag>Address</tag>
<tag>smoke</tag>
<status status="PASS" starttime="20211123 14:23:11.468" endtime="20211123 14:23:11.601"/>
</test>
<test id="s1-t2" name="Verify Query - Check StateProvinceID">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>sql/Person/Address/StateProvinceID.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211123 14:23:11.732" level="INFO" html="true">Getting file '&lt;a href="file:///var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Person/Address/StateProvinceID.sql"&gt;/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Person/Address/StateProvinceID.sql&lt;/a&gt;'.</msg>
<msg timestamp="20211123 14:23:11.732" level="INFO">${sql_query} = SELECT count(*) AS count
FROM (
	SELECT DISTINCT StateProvinceID
	FROM Person.Address
	EXCEPT
	SELECT DISTINCT StateProvinceID
	FROM Person.StateProvince
	) t;
</msg>
<status status="PASS" starttime="20211123 14:23:11.688" endtime="20211123 14:23:11.732"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>${sql_query}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20211123 14:23:11.817" level="INFO">Executing : Query  |  SELECT count(*) AS count
FROM (
	SELECT DISTINCT StateProvinceID
	FROM Person.Address
	EXCEPT
	SELECT DISTINCT StateProvinceID
	FROM Person.StateProvince
	) t;
 </msg>
<msg timestamp="20211123 14:23:11.821" level="INFO">${output} = [(0,)]</msg>
<status status="PASS" starttime="20211123 14:23:11.774" endtime="20211123 14:23:11.821"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211123 14:23:11.907" level="INFO">[(0,)]</msg>
<status status="PASS" starttime="20211123 14:23:11.863" endtime="20211123 14:23:11.907"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[(0,)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20211123 14:23:11.993" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211123 14:23:11.951" endtime="20211123 14:23:11.994"/>
</kw>
<doc>| The test checks if all StateProvinceID key values from the Address table are in the StateProvince table
|
| 1. Load SQL script from file
| 2. Executing the script
| 3. If as a result of the script execution we get 0, then the test is passed</doc>
<tag>Address</tag>
<tag>smoke</tag>
<status status="PASS" starttime="20211123 14:23:11.644" endtime="20211123 14:23:12.038"/>
</test>
<test id="s1-t3" name="Verify Query - column name">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>sql/Person/Address/Measures.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211123 14:23:12.167" level="INFO" html="true">Getting file '&lt;a href="file:///var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Person/Address/Measures.sql"&gt;/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Person/Address/Measures.sql&lt;/a&gt;'.</msg>
<msg timestamp="20211123 14:23:12.167" level="INFO">${sql_query} = SELECT COLUMN_NAME
	,IS_NULLABLE
	,DATA_TYPE
	,CHARACTER_MAXIMUM_LENGTH
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = 'Person'
	AND TABLE_NAME = 'Address'
ORDER BY COLUMN_NAME;
</msg>
<status status="PASS" starttime="20211123 14:23:12.123" endtime="20211123 14:23:12.167"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>${sql_query}</arg>
<arg>\</arg>
<arg>True</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20211123 14:23:12.252" level="INFO">Executing : Query  |  SELECT COLUMN_NAME
	,IS_NULLABLE
	,DATA_TYPE
	,CHARACTER_MAXIMUM_LENGTH
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = 'Person'
	AND TABLE_NAME = 'Address'
ORDER BY COLUMN_NAME;
 </msg>
<msg timestamp="20211123 14:23:12.256" level="INFO">${output} = [{'COLUMN_NAME': 'AddressID', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'int', 'CHARACTER_MAXIMUM_LENGTH': None}, {'COLUMN_NAME': 'AddressLine1', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'nvarchar', 'CHARACTER_MAXIM...</msg>
<status status="PASS" starttime="20211123 14:23:12.209" endtime="20211123 14:23:12.256"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211123 14:23:12.341" level="INFO">[{'COLUMN_NAME': 'AddressID', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'int', 'CHARACTER_MAXIMUM_LENGTH': None}, {'COLUMN_NAME': 'AddressLine1', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'nvarchar', 'CHARACTER_MAXIMUM_LENGTH': 60}, {'COLUMN_NAME': 'AddressLine2', 'IS_NULLABLE': 'YES', 'DATA_TYPE': 'nvarchar', 'CHARACTER_MAXIMUM_LENGTH': 60}, {'COLUMN_NAME': 'City', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'nvarchar', 'CHARACTER_MAXIMUM_LENGTH': 30}, {'COLUMN_NAME': 'ModifiedDate', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'datetime', 'CHARACTER_MAXIMUM_LENGTH': None}, {'COLUMN_NAME': 'PostalCode', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'nvarchar', 'CHARACTER_MAXIMUM_LENGTH': 15}, {'COLUMN_NAME': 'rowguid', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'uniqueidentifier', 'CHARACTER_MAXIMUM_LENGTH': None}, {'COLUMN_NAME': 'SpatialLocation', 'IS_NULLABLE': 'YES', 'DATA_TYPE': 'geography', 'CHARACTER_MAXIMUM_LENGTH': -1}, {'COLUMN_NAME': 'StateProvinceID', 'IS_NULLABLE': 'NO', 'DATA_TYPE': 'int', 'CHARACTER_MAXIMUM_LENGTH': None}]</msg>
<status status="PASS" starttime="20211123 14:23:12.298" endtime="20211123 14:23:12.341"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[0]}[COLUMN_NAME]</arg>
<arg>AddressID</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.387" endtime="20211123 14:23:12.431"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[1]}[COLUMN_NAME]</arg>
<arg>AddressLine1</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.474" endtime="20211123 14:23:12.517"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[2]}[COLUMN_NAME]</arg>
<arg>AddressLine2</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.561" endtime="20211123 14:23:12.604"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[3]}[COLUMN_NAME]</arg>
<arg>City</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.647" endtime="20211123 14:23:12.691"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[4]}[COLUMN_NAME]</arg>
<arg>ModifiedDate</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.734" endtime="20211123 14:23:12.777"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[5]}[COLUMN_NAME]</arg>
<arg>PostalCode</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.821" endtime="20211123 14:23:12.865"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[6]}[COLUMN_NAME]</arg>
<arg>rowguid</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.909" endtime="20211123 14:23:12.952"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[7]}[COLUMN_NAME]</arg>
<arg>SpatialLocation</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:12.994" endtime="20211123 14:23:13.039"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[8]}[COLUMN_NAME]</arg>
<arg>StateProvinceID</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20211123 14:23:13.083" endtime="20211123 14:23:13.129"/>
</kw>
<doc>| Checking for columns in the Address table
|
| 1. Load SQL script from file
| 2. Executing the script
| 3. We write the result to the list $ {output} and check it</doc>
<tag>Address</tag>
<tag>smoke</tag>
<status status="PASS" starttime="20211123 14:23:12.080" endtime="20211123 14:23:13.171"/>
</test>
<test id="s1-t4" name="Table Must Exist - Document">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>Document</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20211123 14:23:13.303" level="INFO">Executing : Table Must Exist  |  Document </msg>
<msg timestamp="20211123 14:23:13.303" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='Document' </msg>
<status status="PASS" starttime="20211123 14:23:13.258" endtime="20211123 14:23:13.305"/>
</kw>
<doc>Checking for the presence of the Document table in the database</doc>
<tag>Document</tag>
<tag>smoke</tag>
<status status="PASS" starttime="20211123 14:23:13.216" endtime="20211123 14:23:13.347"/>
</test>
<test id="s1-t5" name="Verify Query - Folder flag">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>sql/Production/Document/FileExtension_FolderFlag.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211123 14:23:13.478" level="INFO" html="true">Getting file '&lt;a href="file:///var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/Document/FileExtension_FolderFlag.sql"&gt;/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/Document/FileExtension_FolderFlag.sql&lt;/a&gt;'.</msg>
<msg timestamp="20211123 14:23:13.478" level="INFO">${sql_query} = SELECT sum(Extention_result) AS Ext_res
	,sum(FolderFlag_result) AS Fold_res
FROM (
	SELECT FolderFlag
		,FileName
		,FileExtension
		,Extension
		,CASE
			WHEN FileExtension LIKE Extension
				THEN 0...</msg>
<status status="PASS" starttime="20211123 14:23:13.436" endtime="20211123 14:23:13.478"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>${sql_query}</arg>
<arg>\</arg>
<arg>True</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20211123 14:23:13.566" level="INFO">Executing : Query  |  SELECT sum(Extention_result) AS Ext_res
	,sum(FolderFlag_result) AS Fold_res
FROM (
	SELECT FolderFlag
		,FileName
		,FileExtension
		,Extension
		,CASE
			WHEN FileExtension LIKE Extension
				THEN 0
			ELSE 1
			END AS Extention_result
		,CASE
			WHEN FolderFlag = FolderTestFlag
				THEN 0
			ELSE 1
			END AS FolderFlag_result
	FROM (
		SELECT FolderFlag
			,FileName
			,FileExtension
			,CASE
				WHEN FileName LIKE '%.%'
					THEN reverse(left(reverse(FileName), charindex('.', reverse(FileName))))
				ELSE ''
				END AS Extension
			,CASE
				WHEN FileExtension = ''
					THEN 1
				ELSE 0
				END AS FolderTestFlag
		FROM Production.Document
		) t
	) t1;
 </msg>
<msg timestamp="20211123 14:23:13.569" level="INFO">${output} = [{'Ext_res': 0, 'Fold_res': 0}]</msg>
<status status="PASS" starttime="20211123 14:23:13.521" endtime="20211123 14:23:13.616"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211123 14:23:13.700" level="INFO">[{'Ext_res': 0, 'Fold_res': 0}]</msg>
<status status="PASS" starttime="20211123 14:23:13.658" endtime="20211123 14:23:13.701"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[0]}[Fold_res]</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20211123 14:23:13.788" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211123 14:23:13.745" endtime="20211123 14:23:13.788"/>
</kw>
<doc>| Testing if the FolderFlag column is well formed.
|
| 1. Load SQL script from file
| 2. Executing the script
| 3. If as a result of the script execution we get 0, then the test is passed</doc>
<tag>Document</tag>
<tag>smoke</tag>
<status status="PASS" starttime="20211123 14:23:13.390" endtime="20211123 14:23:13.831"/>
</test>
<test id="s1-t6" name="Verify Query - File extention">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>sql/Production/Document/FileExtension_FolderFlag.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211123 14:23:13.962" level="INFO" html="true">Getting file '&lt;a href="file:///var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/Document/FileExtension_FolderFlag.sql"&gt;/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/Document/FileExtension_FolderFlag.sql&lt;/a&gt;'.</msg>
<msg timestamp="20211123 14:23:13.962" level="INFO">${sql_query} = SELECT sum(Extention_result) AS Ext_res
	,sum(FolderFlag_result) AS Fold_res
FROM (
	SELECT FolderFlag
		,FileName
		,FileExtension
		,Extension
		,CASE
			WHEN FileExtension LIKE Extension
				THEN 0...</msg>
<status status="PASS" starttime="20211123 14:23:13.919" endtime="20211123 14:23:13.962"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>${sql_query}</arg>
<arg>\</arg>
<arg>True</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20211123 14:23:14.049" level="INFO">Executing : Query  |  SELECT sum(Extention_result) AS Ext_res
	,sum(FolderFlag_result) AS Fold_res
FROM (
	SELECT FolderFlag
		,FileName
		,FileExtension
		,Extension
		,CASE
			WHEN FileExtension LIKE Extension
				THEN 0
			ELSE 1
			END AS Extention_result
		,CASE
			WHEN FolderFlag = FolderTestFlag
				THEN 0
			ELSE 1
			END AS FolderFlag_result
	FROM (
		SELECT FolderFlag
			,FileName
			,FileExtension
			,CASE
				WHEN FileName LIKE '%.%'
					THEN reverse(left(reverse(FileName), charindex('.', reverse(FileName))))
				ELSE ''
				END AS Extension
			,CASE
				WHEN FileExtension = ''
					THEN 1
				ELSE 0
				END AS FolderTestFlag
		FROM Production.Document
		) t
	) t1;
 </msg>
<msg timestamp="20211123 14:23:14.051" level="INFO">${output} = [{'Ext_res': 0, 'Fold_res': 0}]</msg>
<status status="PASS" starttime="20211123 14:23:14.004" endtime="20211123 14:23:14.051"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211123 14:23:14.138" level="INFO">[{'Ext_res': 0, 'Fold_res': 0}]</msg>
<status status="PASS" starttime="20211123 14:23:14.095" endtime="20211123 14:23:14.138"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output[0]}[Ext_res]</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20211123 14:23:14.224" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211123 14:23:14.180" endtime="20211123 14:23:14.224"/>
</kw>
<doc>| Testing if the FileExtension column is well formed.
|
| 1. Load SQL script from file
| 2. Executing the script
| 3. If as a result of the script execution we get 0, then the test is passed</doc>
<tag>Document</tag>
<tag>smoke</tag>
<status status="PASS" starttime="20211123 14:23:13.874" endtime="20211123 14:23:14.266"/>
</test>
<test id="s1-t7" name="Table Must Exist - UnitMeasure">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>UnitMeasure</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20211123 14:23:14.396" level="INFO">Executing : Table Must Exist  |  UnitMeasure </msg>
<msg timestamp="20211123 14:23:14.396" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='UnitMeasure' </msg>
<status status="PASS" starttime="20211123 14:23:14.353" endtime="20211123 14:23:14.397"/>
</kw>
<doc>Checking for the presence of the UnitMeasure table in the database</doc>
<tag>smoke</tag>
<tag>UnitMeasure</tag>
<status status="PASS" starttime="20211123 14:23:14.310" endtime="20211123 14:23:14.440"/>
</test>
<test id="s1-t8" name="Verify Query - Check full duplicates in UnitMeasure">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>sql/Production/UnitMeasure/duplicates.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211123 14:23:14.570" level="INFO" html="true">Getting file '&lt;a href="file:///var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/UnitMeasure/duplicates.sql"&gt;/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/UnitMeasure/duplicates.sql&lt;/a&gt;'.</msg>
<msg timestamp="20211123 14:23:14.570" level="INFO">${sql_query} = SELECT count(*) AS count
FROM (
	SELECT UnitMeasureCode
		,Name
		,count(*) AS count
	FROM Production.UnitMeasure
	GROUP BY UnitMeasureCode
		,Name
	HAVING count(*) &gt; 1
	) t;
</msg>
<status status="PASS" starttime="20211123 14:23:14.527" endtime="20211123 14:23:14.570"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>${sql_query}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20211123 14:23:14.656" level="INFO">Executing : Query  |  SELECT count(*) AS count
FROM (
	SELECT UnitMeasureCode
		,Name
		,count(*) AS count
	FROM Production.UnitMeasure
	GROUP BY UnitMeasureCode
		,Name
	HAVING count(*) &gt; 1
	) t;
 </msg>
<msg timestamp="20211123 14:23:14.660" level="INFO">${output} = [(0,)]</msg>
<status status="PASS" starttime="20211123 14:23:14.613" endtime="20211123 14:23:14.661"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211123 14:23:14.748" level="INFO">[(0,)]</msg>
<status status="PASS" starttime="20211123 14:23:14.705" endtime="20211123 14:23:14.748"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[(0,)]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20211123 14:23:14.836" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211123 14:23:14.791" endtime="20211123 14:23:14.836"/>
</kw>
<doc>| Checking the table for duplicates
|
| 1. Load SQL script from file
| 2. Executing the script
| 3. If as a result of the script execution we get 0, then the test is passed</doc>
<tag>smoke</tag>
<tag>UnitMeasure</tag>
<status status="PASS" starttime="20211123 14:23:14.484" endtime="20211123 14:23:14.877"/>
</test>
<test id="s1-t9" name="Insert NULL Into UnitMeasureCode in UnitMeasure Table">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>sql/Production/UnitMeasure/null_Code.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211123 14:23:15.006" level="INFO" html="true">Getting file '&lt;a href="file:///var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/UnitMeasure/null_Code.sql"&gt;/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/UnitMeasure/null_Code.sql&lt;/a&gt;'.</msg>
<msg timestamp="20211123 14:23:15.006" level="INFO">${sql_query} = INSERT INTO Production.UnitMeasure (UnitMeasureCode)
VALUES (NULL);
</msg>
<status status="PASS" starttime="20211123 14:23:14.962" endtime="20211123 14:23:15.006"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<var>${err_msg}</var>
<arg>*</arg>
<arg>Execute SQL String</arg>
<arg>${sql_query}</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${sql_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20211123 14:23:15.138" level="INFO">Executing : Execute SQL String  |  INSERT INTO Production.UnitMeasure (UnitMeasureCode)
VALUES (NULL);
 </msg>
<msg timestamp="20211123 14:23:15.140" level="FAIL">IntegrityError: (515, b"Cannot insert the value NULL into column 'UnitMeasureCode', table 'AdventureWorks2019.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severity 16:\nGeneral SQL Server error: Check messages from the SQL Server\n")</msg>
<status status="FAIL" starttime="20211123 14:23:15.094" endtime="20211123 14:23:15.186"/>
</kw>
<msg timestamp="20211123 14:23:15.229" level="INFO">${err_msg} = IntegrityError: (515, b"Cannot insert the value NULL into column 'UnitMeasureCode', table 'AdventureWorks2019.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20...</msg>
<status status="PASS" starttime="20211123 14:23:15.051" endtime="20211123 14:23:15.229"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211123 14:23:15.314" level="INFO">IntegrityError: (515, b"Cannot insert the value NULL into column 'UnitMeasureCode', table 'AdventureWorks2019.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severity 16:\nGeneral SQL Server error: Check messages from the SQL Server\n")</msg>
<status status="PASS" starttime="20211123 14:23:15.272" endtime="20211123 14:23:15.314"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211123 14:23:15.400" level="INFO">Length is 283</msg>
<status status="PASS" starttime="20211123 14:23:15.356" endtime="20211123 14:23:15.400"/>
</kw>
<doc>| We are trying to insert a NULL value into the UnitMeasure table into the UnitMeasureCode column
|
| 1. Load SQL script from file
| 2. Executing the script
| 3. If the script is executed with an error, then the test passed and we cannot insert NULL</doc>
<tag>smoke</tag>
<tag>UnitMeasure</tag>
<status status="PASS" starttime="20211123 14:23:14.920" endtime="20211123 14:23:15.444"/>
</test>
<test id="s1-t10" name="Insert NULL Into Name in UnitMeasure Table">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>sql/Production/UnitMeasure/null_Name.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211123 14:23:15.575" level="INFO" html="true">Getting file '&lt;a href="file:///var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/UnitMeasure/null_Name.sql"&gt;/var/jenkins_home/workspace/db_test/05 - Test Automation for Data Quality Engineers - part 1/sql/Production/UnitMeasure/null_Name.sql&lt;/a&gt;'.</msg>
<msg timestamp="20211123 14:23:15.575" level="INFO">${sql_query} = INSERT INTO Production.UnitMeasure (Name)
VALUES (NULL);
</msg>
<status status="PASS" starttime="20211123 14:23:15.530" endtime="20211123 14:23:15.575"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<var>${err_msg}</var>
<arg>*</arg>
<arg>Execute SQL String</arg>
<arg>${sql_query}</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${sql_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20211123 14:23:15.792" level="INFO">Executing : Execute SQL String  |  INSERT INTO Production.UnitMeasure (Name)
VALUES (NULL);
 </msg>
<msg timestamp="20211123 14:23:15.794" level="FAIL">IntegrityError: (515, b"Cannot insert the value NULL into column 'Name', table 'AdventureWorks2019.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severity 16:\nGeneral SQL Server error: Check messages from the SQL Server\n")</msg>
<status status="FAIL" starttime="20211123 14:23:15.663" endtime="20211123 14:23:15.794"/>
</kw>
<msg timestamp="20211123 14:23:15.837" level="INFO">${err_msg} = IntegrityError: (515, b"Cannot insert the value NULL into column 'Name', table 'AdventureWorks2019.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severi...</msg>
<status status="PASS" starttime="20211123 14:23:15.617" endtime="20211123 14:23:15.837"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211123 14:23:15.922" level="INFO">IntegrityError: (515, b"Cannot insert the value NULL into column 'Name', table 'AdventureWorks2019.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severity 16:\nGeneral SQL Server error: Check messages from the SQL Server\n")</msg>
<status status="PASS" starttime="20211123 14:23:15.879" endtime="20211123 14:23:15.922"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211123 14:23:16.008" level="INFO">Length is 272</msg>
<status status="PASS" starttime="20211123 14:23:15.965" endtime="20211123 14:23:16.008"/>
</kw>
<doc>| We are trying to insert a NULL value into the UnitMeasure table into the Name column
|
| 1. Load SQL script from file
| 2. Executing the script
| 3. If the script is executed with an error, then the test passed and we cannot insert NULL</doc>
<tag>smoke</tag>
<tag>UnitMeasure</tag>
<status status="PASS" starttime="20211123 14:23:15.486" endtime="20211123 14:23:16.050"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20211123 14:23:16.137" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20211123 14:23:16.095" endtime="20211123 14:23:16.137"/>
</kw>
<doc>Robot resources and variables for all tests</doc>
<status status="PASS" starttime="20211123 14:23:10.975" endtime="20211123 14:23:16.181"/>
</suite>
<statistics>
<total>
<stat pass="10" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="3" fail="0" skip="0">Address</stat>
<stat pass="3" fail="0" skip="0">Document</stat>
<stat pass="10" fail="0" skip="0">smoke</stat>
<stat pass="4" fail="0" skip="0">UnitMeasure</stat>
</tag>
<suite>
<stat pass="10" fail="0" skip="0" id="s1" name="Robottests">Robottests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
